{
  "openapi": "3.0.0",
  "info": {
    "title": "Demonstride",
    "version": "4.3.0",
    "description": "Restful API for the CordX Services"
  },
  "host": "0.0.0.0:4995",
  "tags": [
    {
      "name": "Entities",
      "description": "Entities API"
    },
    {
      "name": "Users",
      "description": "Users API"
    }
  ],
  "paths": {
    "/entities": {
      "get": {
        "tags": [
          "Entities"
        ],
        "description": "List all of our available entities",
        "responses": {
          "200": {
            "description": "Returns a list of all entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entity"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/entities/user/{id}": {
      "get": {
        "tags": [
          "Entities",
          "Users"
        ],
        "description": "Fetch a user by either their Discord ID or CordX Cornflake ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The users's ID, can either be a Discord ID or a CordX Cornflake ID."
            }
          },
          {
            "in": "query",
            "name": "id_type",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The type of ID provided, can either be DISCORD or CORNFLAKE."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the user details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid CordX Cornflake ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/files": {
      "get": {
        "description": "List all files and directories in the CDN.",
        "responses": {
          "200": {
            "description": "A list of all files and directories in the CDN.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unable to list files."
          }
        }
      }
    },
    "/health": {
      "get": {
        "description": "Check the health of the API.",
        "responses": {
          "200": {
            "description": "The API is healthy and running."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Entity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Entity's CordX Cornflake ID"
          },
          "type": {
            "type": "string",
            "description": "The type of entity (User, Organization)"
          },
          "domain": {
            "type": "string",
            "description": "The domain of the entity"
          },
          "_count": {
            "type": "object",
            "properties": {
              "domains": {
                "type": "number",
                "description": "The number of domains associated with the entity"
              },
              "uploads": {
                "type": "number",
                "description": "The number of uploads created by the entity"
              },
              "webhooks": {
                "type": "number",
                "description": "The number of webhooks associated with the entity"
              }
            }
          }
        }
      },
      "UserEntity": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "description": "The user's Discord Avatar URL"
          },
          "banner": {
            "type": "string",
            "description": "The user's Discord Banner URL"
          },
          "username": {
            "type": "string",
            "description": "The user's Discord Username"
          },
          "globalName": {
            "type": "string",
            "description": "The user's Discord Global Username"
          },
          "userid": {
            "type": "string",
            "description": "The user's Discord ID"
          },
          "entityId": {
            "type": "string",
            "description": "The user's Entity ID"
          },
          "_count": {
            "type": "object",
            "properties": {
              "orgs": {
                "type": "number",
                "description": "The number of organizations the user is in/owns"
              }
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The status code of the error"
          },
          "message": {
            "type": "string",
            "description": "The error message"
          },
          "code": {
            "type": "number",
            "description": "The HTTP status code"
          }
        }
      },
      "File": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the file or directory."
          },
          "isDirectory": {
            "type": "boolean",
            "description": "Indicates if the item is a directory."
          },
          "path": {
            "type": "string",
            "description": "The relative path to the file or directory."
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            },
            "description": "The list of files and directories within this directory (if it is a directory)."
          }
        }
      }
    }
  }
}