generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("MYSQL_URI")
}

model Entity {
    id       String           @id @default(uuid()) // Unique identifier for the entity
    type     EntityType       @default(USER) // The type of the entity (user or organization)
    user     UserEntity?      @relation("UserEntity")
    org      OrgEntity?       @relation("OrgEntity")
    domain   String?          @unique // The entity's domain (if applicable)
    domains  EntityDomains[] // List of domains associated with the entity
    uploads  EntityUploads[] // List of uploads created by the entity
    webhooks EntityWebhooks[] // List of webhooks associated with the entity
    perms    EntityPerms[]    @relation("EntityPermissions") // List of permissions assigned to the entity
    secret   EntitySecret?    @relation(fields: [key], references: [key], map: "EntitySecretKey")
    key      String?          @unique // The entity's secret key
}

model UserEntity {
    id         String                @id @default(uuid()) // The user's CordX Cornflake (snowflake)
    avatar     String? // URL of the user's Discord avatar
    banner     String? // URL of the user's Discord banner
    username   String? // The user's Discord username
    globalName String? // The user's global name
    userid     String?               @unique // The user's Discord ID
    folder     String?               @db.Text // The user's folder/bucket ID
    key        String?               @unique // The user's auth signature key
    signature  UserEntitySignatures? @relation(fields: [key], references: [key]) // The user's auth signature
    entity     Entity                @relation("UserEntity", fields: [id], references: [id])
    orgs       OrgEntity[]           @relation("UserOrgs") // List of organizations created by the user
}

model OrgEntity {
    id          String             @id @unique // Unique identifier for the organization
    name        String             @db.VarChar(255) // The organization name
    logo        String             @db.VarChar(255) // The organization logo
    banner      String             @db.LongText // The organization banner
    description String             @db.LongText // The organization description
    links       OrgEntityLinks? // The organization links (GitHub, Twitter, etc.)
    members     OrgEntityMembers[] // List of members in the organization
    creator     UserEntity         @relation("UserOrgs", fields: [owner], references: [userid])
    owner       String             @db.VarChar(255) // The organization owner
    createdAt   DateTime           @default(now()) // The date the organization was created
    updatedAt   DateTime           @updatedAt // The date the organization was last updated
    entity      Entity             @relation("OrgEntity", fields: [id], references: [id])
}

model EntitySecret {
    id     String  @id @default(uuid()) // Unique identifier for the secret
    key    String  @unique // The secret key
    entity Entity? @relation(map: "EntitySecretKey")
}

model EntityPerms {
    id           String            @id @unique // Unique identifier for the permission
    type         PermissionType // The type of the permission (user or organization)
    userPerm     UserPermissions? // The user permission
    orgPerm      OrgPermissions? // The organization permission
    entityId     String // The entity the permission belongs to
    org_memberId String?
    entity       Entity            @relation(name: "EntityPermissions", fields: [entityId], references: [id], map: "EntityPermsEntityId")
    org_member   OrgEntityMembers? @relation(name: "OrgEntityRoles", fields: [org_memberId], references: [id], map: "EntityPermsOrgMemberId")
}

model EntityUploads {
    id       String    @id @default(uuid()) // The image/upload ID
    entityId String // The entity the upload/image belongs to
    fileid   String? // The file ID (this is generated by the storage provider)
    filename String? // The generated name of the file ([342837t2bd3gd3].png)
    name     String? // The name of the file (Chrome_123456788.png)
    type     String? // The type of the file (image/png)
    size     Int? // The size of the file (in bytes)
    date     DateTime? // The date the file was uploaded
    entity   Entity    @relation(fields: [entityId], references: [id])
}

model UserEntitySignatures {
    id         Int         @id @default(autoincrement()) // Unique identifier for the signature
    key        String      @unique @default(uuid()) // The signature key
    userEntity UserEntity?
}

model EntityDomains {
    id        String    @id @default(uuid()) // Unique identifier for the domain
    name      String    @db.VarChar(255) // The domain name
    content   String    @db.LongText // The domain content
    verified  Boolean   @default(false) // Indicates if the domain is verified
    createdAt DateTime  @default(now()) // The date the domain was created
    updatedAt DateTime? @updatedAt // The date the domain was last updated
    entityId  String // The entity the domain belongs to
    entity    Entity    @relation(fields: [entityId], references: [id])
}

model EntityWebhooks {
    id       String  @id @default(uuid()) // The webhook ID
    token    String  @db.LongText // The webhook token
    name     String  @db.Text // The webhook name
    enabled  Boolean @default(false) // If the webhook is enabled
    entityId String // The entity the webhook belongs to
    entity   Entity  @relation(fields: [entityId], references: [id])
}

model OrgEntityMembers {
    id     String        @id @unique // Unique identifier for the organization member
    org    OrgEntity     @relation(fields: [orgId], references: [id]) // The organization the member belongs to
    roles  EntityPerms[] @relation("OrgEntityRoles") // The roles the member has in the organization
    userid String        @unique // The user ID of the member
    orgId  String
}

model OrgEntityLinks {
    id        String    @id @unique // Unique identifier for the organization links
    discord   String    @db.Text // The organization Discord link
    github    String    @db.Text // The organization GitHub link
    twitter   String    @db.Text // The organization Twitter link
    website   String    @db.Text // The organization website link
    instagram String    @db.Text // The organization Instagram link
    youtube   String    @db.Text // The organization YouTube link
    orgId     String    @unique
    org       OrgEntity @relation(fields: [orgId], references: [id]) // The organization the links belong to
}

model errors {
    id        String    @id @default(uuid()) // Unique identifier for the error
    state     ErrStates @default(OPEN) // The state of the error
    type      ErrTypes  @default(UNKNOWN_ERR) // The type of the error
    status    String    @db.Text // The status of the error
    message   String    @db.LongText // The error message
    reporter  String    @db.Text // The user who reported the error
    error_obj Json // The error object
    createdAt DateTime  @default(now()) // The date the error was created
    updatedAt DateTime? @updatedAt // The date the error was last updated
}

model partners {
    id     String @id @default(uuid()) // Unique identifier for the partner
    name   String @db.Text // The partner name
    image  String @db.Text // The partner image
    bio    String @db.LongText // The partner bio
    url    String @db.Text // The partner URL
    social String @db.Text // The partner social link
}

model reports {
    id        String       @id // Unique identifier for the report
    type      ReportTypes  @default(BUG_REPORT) // The type of the report
    status    ReportStatus @default(OPEN) // The status of the report
    author    String       @db.Text // The user who reported the issue
    reason    String       @db.LongText // The reason for the report
    mod       String?      @db.Text // The moderator assigned to the report
    createdAt DateTime     @default(now()) // The date the report was created
    updatedAt DateTime?    @updatedAt // The date the report was last updated
}

// Enums for the schema
// --------------------------
enum EntityType {
    USER
    ORG
}

enum PermissionType {
    USER
    ORG
}

enum UserPermissions {
    OWNER
    ADMIN
    STAFF
    SUPPORT
    DEVELOPER
    BETA_TESTER
    BANNED_USER
    VERIFIED_USER
}

enum OrgPermissions {
    OWNER
    ADMIN
    EDITOR
    READER
    GUEST
    BANNED
    VERIFIED
}

enum ReportTypes {
    BUG_REPORT
    FEATURE_REQUEST
    PARTNER_REQUEST
    PARTNER_REPORT
    USER_REPORT
    IMAGE_REPORT
    DOMAIN_REPORT
    WEBHOOK_REPORT
    ORG_REPORT
}

enum ReportStatus {
    OPEN
    INVESTIGATING
    INFO_NEEDED
    CLOSED
}

enum ErrTypes {
    API_ERR
    AUTH_ERR
    BUCKET_ERR
    CACHE_ERR
    CLIENT_ERR
    DB_ERR
    EXTERNAL_ERR
    INTERNAL_ERR
    UPLOAD_ERR
    USER_ERR
    WEBHOOK_ERR
    UNKNOWN_ERR
}

enum ErrStates {
    OPEN
    INVESTIGATING
    RESOLVED
    IGNORED
}
