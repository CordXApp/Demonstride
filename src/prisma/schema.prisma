generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// USER RELATED MODELS
model users {
    id          String        @id @default(uuid()) // The users CornFlake/CordX ID
    avatar      String? // The users discord avatar
    banner      String? // The users discord banner
    username    String? // The users discord username
    globalName  String? // The users global name
    userid      String?       @unique // The users Discord ID
    secret      String?       @db.Text // The users api secret
    folder      String?       @db.Text // The users folder/bucket ID
    webhook     String?       @db.Text // The users Discord Webhook URL
    cookie      String?       @db.Text // The users cookie (for authorization)
    beta        Boolean?      @default(false) // If the user is a beta tester
    banned      Boolean?      @default(false) // If the user is banned
    verified    Boolean?      @default(false) // If the user is verified
    domain      String?       @db.Text // The users active domain
    domains     domains[] // The users verified domains
    images      images[] // The users uploads
    key         String?       @unique // The users auth signature key
    signature   signatures?   @relation(fields: [key], references: [key]) // The users auth signature
    permissions permissions[] // The users permissions
    orgs        orgs[] // The users organizations
}

model images {
    id       String    @id @default(uuid()) // The image/upload ID
    userid   String? // The user the upload/image belongs to
    orgid    String? // The organization the upload/image belongs to
    fileid   String? // The file ID (this is generated by the storage provider)
    filename String? // The generated name of the file ([342837t2bd3gd3].png)
    name     String? // The name of the file (Chrome_123456788.png)
    type     String? // The type of the file (image/png)
    size     Int? // The size of the file (in bytes)
    date     DateTime? // The date the file was uploaded
    users    users?    @relation(fields: [userid], references: [userid])
    orgs     orgs?     @relation(fields: [orgid], references: [id])
}

model secrets {
    id  String @id @default(uuid()) // The secret ID
    key String @db.LongText // The secret key
}

model permissions {
    id    String          @id @default(uuid()) // The permission ID
    name  UserPermissions // The permission name
    users users[] // The users with this permission
}

model signatures {
    id   Int    @id @default(autoincrement()) // The signature ID
    key  String @unique @default(uuid()) // The signature key
    user users?
}

model domains {
    id        String    @id @default(uuid()) // The domain ID
    name      String    @db.VarChar(255) // The domain name
    content   String    @db.LongText // The domain content
    verified  Boolean   @default(false) // If the domain is verified
    createdAt DateTime  @default(now()) // The date the domain was created
    updatedAt DateTime? @updatedAt // The date the domain was last updated
    users     users?    @relation(fields: [user], references: [userid])
    user      String? // The user who owns the domain
}

model webhooks {
    id      String  @id // The webhook ID
    token   String  @db.LongText // The webhook token
    name    String  @db.Text // The webhook name
    enabled Boolean @default(false) // If the webhook is enabled
}

model errors {
    id        String    @id @default(uuid()) // The error ID
    state     ErrStates @default(OPEN) // The state of the error
    type      ErrTypes  @default(UNKNOWN_ERR) // The type of the error
    status    String    @db.Text // The status of the error
    message   String    @db.LongText // The error message
    reporter  String    @db.Text // The user who reported the error
    error_obj Json // The error object
    createdAt DateTime  @default(now()) // The date the error was created
    updatedAt DateTime? @updatedAt // The date the error was last updated
}

model partners {
    id     String @id @default(uuid()) // The partner ID
    name   String @db.Text // The partner name
    image  String @db.Text // The partner image
    bio    String @db.LongText // The partner bio
    url    String @db.Text // The partner URL
    social String @db.Text // The partner social link
}

model reports {
    id        String       @id // The report ID
    type      ReportTypes  @default(BUG_REPORT) // The type of the report
    status    ReportStatus @default(OPEN) // The status of the report
    author    String       @db.Text // The user who reported the issue
    reason    String       @db.LongText // The reason for the report
    mod       String?      @db.Text // The moderator assigned to the report
    createdAt DateTime     @default(now()) // The date the report was created
    updatedAt DateTime?    @updatedAt // The date the report was last updated
}

// ORGANIZATION RELATED MODELS
model orgs {
    id          String       @id @unique // Unique identifier for the organization
    name        String       @db.VarChar(255) // The organization name
    logo        String       @db.VarChar(255) // The organization logo
    banner      String       @db.LongText // The organization banner
    description String       @db.LongText // The organization description
    links       org_links? // The organization links (GitHub, Twitter, etc.)
    members     org_member[] // List of members in the organization
    creator     users        @relation(fields: [owner], references: [userid])
    owner       String       @db.VarChar(255) // The organization owner
    api_key     String       @unique // The organization API key
    verified    Boolean      @default(false) // Indicates if the organization is verified
    banned      Boolean      @default(false) // Indicates if the organization is banned
    domain      org_domain? // The organization domain
    createdAt   DateTime     @default(now()) // The date the organization was created
    updatedAt   DateTime     @updatedAt // The date the organization was last updated
    images      images[] // List of images uploaded by the organization
}

model org_member {
    id     String      @id @unique // The organization member ID
    org    orgs        @relation(fields: [id], references: [id]) // The organization the member belongs to
    roles  org_roles[] // The roles the member has in the organization
    userid String      @unique // The user ID of the member
}

model org_links {
    id        String @id @unique // The organization links ID
    discord   String @db.Text // The organization discord link
    github    String @db.Text // The organization github link
    twitter   String @db.Text // The organization twitter link
    website   String @db.Text // The organization website link
    instagram String @db.Text // The organization instagram link
    youtube   String @db.Text // The organization youtube link
    org       orgs   @relation(fields: [id], references: [id]) // The organization the links belong to
}

model org_roles {
    id     String         @id @unique // The organization role ID
    role   OrgPermissions // The role of the member in the organization
    user   org_member     @relation(fields: [member], references: [id]) // The member with this role
    member String         @db.VarChar(255) // The member ID
}

model org_domain {
    id        String   @id @unique // The organization domain ID
    name      String   @db.Text // The organization domain name
    content   String   @db.LongText // The organization domain content
    verified  Boolean  @default(false) // If the organization domain is verified
    createdAt DateTime @default(now()) // The date the organization domain was created
    updatedAt DateTime @updatedAt // The date the organization domain was last updated
    org       orgs     @relation(fields: [id], references: [id]) // The organization the domain belongs to
}

// Enum representing different levels of user permissions within the system.
// - OWNER: Full access to all resources and settings.
// - ADMIN: Administrative access with most permissions.
// - STAFF: Access to perform staff-related tasks.
// - SUPPORT: Access to provide user support and handle tickets.
// - DEVELOPER: Access to development and technical resources.
enum UserPermissions {
    OWNER
    ADMIN
    STAFF
    SUPPORT
    DEVELOPER
}

enum OrgPermissions {
    OWNER
    ADMIN
    EDITOR
    READER
    GUEST
}

// Enum representing different types of reports that can be submitted.
// - BUG_REPORT: A report of a bug or issue with the system.
// - FEATURE_REQUEST: A request for a new feature or enhancement.
// - PARTNER_REQUEST: A request to become a partner or affiliate.
// - PARTNER_REPORT: A report of a partner or affiliate issue.
// - USER_REPORT: A report of a user or member issue.
// - IMAGE_REPORT: A report of an image or media issue.
// - DOMAIN_REPORT: A report of a domain or URL issue.
// - WEBHOOK_REPORT: A report of a webhook or integration issue.
// - ORG_REPORT: A report of an organization or group issue.
enum ReportTypes {
    BUG_REPORT
    FEATURE_REQUEST
    PARTNER_REQUEST
    PARTNER_REPORT
    USER_REPORT
    IMAGE_REPORT
    DOMAIN_REPORT
    WEBHOOK_REPORT
    ORG_REPORT
}

// Enum representing the status of a report.
// - OPEN: The report is open and has not been assigned.
// - INVESTIGATING: The report is being investigated or reviewed.
// - INFO_NEEDED: Additional information is needed to resolve the report.
// - CLOSED: The report has been resolved and closed.
enum ReportStatus {
    OPEN
    INVESTIGATING
    INFO_NEEDED
    CLOSED
}

// Enum representing different types of errors that can occur.
// - API_ERR: An error with the API or external service.
// - AUTH_ERR: An error with user authentication or authorization.
// - BUCKET_ERR: An error with the storage bucket or file system.
// - CACHE_ERR: An error with the cache or data storage.
// - CLIENT_ERR: An error with the client or user interface.
// - DB_ERR: An error with the database or data access.
// - EXTERNAL_ERR: An error with an external service or integration.
// - INTERNAL_ERR: An internal or unknown error occurred.
// - UPLOAD_ERR: An error with uploading or processing files.
// - USER_ERR: An error with user input or validation.
// - WEBHOOK_ERR: An error with webhooks or integrations.
// - UNKNOWN_ERR: An unknown or unspecified error occurred.
enum ErrTypes {
    API_ERR
    AUTH_ERR
    BUCKET_ERR
    CACHE_ERR
    CLIENT_ERR
    DB_ERR
    EXTERNAL_ERR
    INTERNAL_ERR
    UPLOAD_ERR
    USER_ERR
    WEBHOOK_ERR
    UNKNOWN_ERR
}

// Enum representing the state of an error.
// - OPEN: The error is open and has not been resolved.
// - INVESTIGATING: The error is being investigated or reviewed.
// - RESOLVED: The error has been resolved and closed.
// - IGNORED: The error has been ignored or dismissed.
enum ErrStates {
    OPEN
    INVESTIGATING
    RESOLVED
    IGNORED
}
